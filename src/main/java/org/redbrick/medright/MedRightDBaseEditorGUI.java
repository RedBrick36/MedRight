/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.redbrick.medright;

import java.awt.EventQueue;
import java.beans.Beans;
import java.util.ArrayList;

import java.util.List;
import javax.persistence.RollbackException;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author RedBrick
 */
public class MedRightDBaseEditorGUI extends JPanel {
  private static final long serialVersionUID = 1L;
  
  public MedRightDBaseEditorGUI () {
    initComponents ();
    if ( !Beans.isDesignTime () ) {
      entityManager.getTransaction ().begin ();
    }
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings ("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

    entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("treatments;create=truePU").createEntityManager();
    query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM Treatments t");
    list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
    masterScrollPane = new javax.swing.JScrollPane();
    masterTable = new javax.swing.JTable();
    uuidLabel = new javax.swing.JLabel();
    typeLabel = new javax.swing.JLabel();
    nameLabel = new javax.swing.JLabel();
    conditionLabel = new javax.swing.JLabel();
    doseLabel = new javax.swing.JLabel();
    measureLabel = new javax.swing.JLabel();
    reminderLabel = new javax.swing.JLabel();
    mondayLabel = new javax.swing.JLabel();
    tuesdayLabel = new javax.swing.JLabel();
    wednesdayLabel = new javax.swing.JLabel();
    thursdayLabel = new javax.swing.JLabel();
    fridayLabel = new javax.swing.JLabel();
    saturdayLabel = new javax.swing.JLabel();
    sundayLabel = new javax.swing.JLabel();
    amLabel = new javax.swing.JLabel();
    midamLabel = new javax.swing.JLabel();
    noonLabel = new javax.swing.JLabel();
    midaftLabel = new javax.swing.JLabel();
    afternoonLabel = new javax.swing.JLabel();
    eveningLabel = new javax.swing.JLabel();
    bedtimeLabel = new javax.swing.JLabel();
    midofnightLabel = new javax.swing.JLabel();
    alldaysLabel = new javax.swing.JLabel();
    alltimesLabel = new javax.swing.JLabel();
    asneededLabel = new javax.swing.JLabel();
    leadtimeLabel = new javax.swing.JLabel();
    otfLabel = new javax.swing.JLabel();
    uuidField = new javax.swing.JTextField();
    typeField = new javax.swing.JTextField();
    nameField = new javax.swing.JTextField();
    conditionField = new javax.swing.JTextField();
    doseField = new javax.swing.JTextField();
    measureField = new javax.swing.JTextField();
    reminderField = new javax.swing.JTextField();
    mondayField = new javax.swing.JTextField();
    tuesdayField = new javax.swing.JTextField();
    wednesdayField = new javax.swing.JTextField();
    thursdayField = new javax.swing.JTextField();
    fridayField = new javax.swing.JTextField();
    saturdayField = new javax.swing.JTextField();
    sundayField = new javax.swing.JTextField();
    amField = new javax.swing.JTextField();
    midamField = new javax.swing.JTextField();
    noonField = new javax.swing.JTextField();
    midaftField = new javax.swing.JTextField();
    afternoonField = new javax.swing.JTextField();
    eveningField = new javax.swing.JTextField();
    bedtimeField = new javax.swing.JTextField();
    midofnightField = new javax.swing.JTextField();
    alldaysField = new javax.swing.JTextField();
    alltimesField = new javax.swing.JTextField();
    asneededField = new javax.swing.JTextField();
    leadtimeField = new javax.swing.JTextField();
    otfField = new javax.swing.JTextField();
    saveButton = new javax.swing.JButton();
    refreshButton = new javax.swing.JButton();
    newButton = new javax.swing.JButton();
    deleteButton = new javax.swing.JButton();

    FormListener formListener = new FormListener();

    masterScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    masterScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    masterScrollPane.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

    masterTable.setAutoCreateRowSorter(true);
    masterTable.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
    masterTable.setAutoscrolls(false);

    org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
    org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${uuid}"));
    columnBinding.setColumnName("Uuid");
    columnBinding.setColumnClass(Integer.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${type}"));
    columnBinding.setColumnName("Type");
    columnBinding.setColumnClass(String.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
    columnBinding.setColumnName("Name");
    columnBinding.setColumnClass(String.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${condition}"));
    columnBinding.setColumnName("Condition");
    columnBinding.setColumnClass(String.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dose}"));
    columnBinding.setColumnName("Dose");
    columnBinding.setColumnClass(Double.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${measure}"));
    columnBinding.setColumnName("Measure");
    columnBinding.setColumnClass(String.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${reminder}"));
    columnBinding.setColumnName("Reminder");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${monday}"));
    columnBinding.setColumnName("Monday");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${tuesday}"));
    columnBinding.setColumnName("Tuesday");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${wednesday}"));
    columnBinding.setColumnName("Wednesday");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${thursday}"));
    columnBinding.setColumnName("Thursday");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${friday}"));
    columnBinding.setColumnName("Friday");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${saturday}"));
    columnBinding.setColumnName("Saturday");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sunday}"));
    columnBinding.setColumnName("Sunday");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${am}"));
    columnBinding.setColumnName("Am");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${midam}"));
    columnBinding.setColumnName("Midam");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${noon}"));
    columnBinding.setColumnName("Noon");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${midaft}"));
    columnBinding.setColumnName("Midaft");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${afternoon}"));
    columnBinding.setColumnName("Afternoon");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${evening}"));
    columnBinding.setColumnName("Evening");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${bedtime}"));
    columnBinding.setColumnName("Bedtime");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${midofnight}"));
    columnBinding.setColumnName("Midofnight");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${alldays}"));
    columnBinding.setColumnName("Alldays");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${alltimes}"));
    columnBinding.setColumnName("Alltimes");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${asneeded}"));
    columnBinding.setColumnName("Asneeded");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${leadtime}"));
    columnBinding.setColumnName("Leadtime");
    columnBinding.setColumnClass(Integer.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${otf}"));
    columnBinding.setColumnName("Otf");
    columnBinding.setColumnClass(String.class);
    bindingGroup.addBinding(jTableBinding);

    masterScrollPane.setViewportView(masterTable);

    uuidLabel.setText("Uuid:");

    typeLabel.setText("Type:");

    nameLabel.setText("Name:");

    conditionLabel.setText("Condition:");

    doseLabel.setText("Dose:");

    measureLabel.setText("Measure:");

    reminderLabel.setText("Reminder:");

    mondayLabel.setText("Monday:");

    tuesdayLabel.setText("Tuesday:");

    wednesdayLabel.setText("Wednesday:");

    thursdayLabel.setText("Thursday:");

    fridayLabel.setText("Friday:");

    saturdayLabel.setText("Saturday:");

    sundayLabel.setText("Sunday:");

    amLabel.setText("Am:");

    midamLabel.setText("Midam:");

    noonLabel.setText("Noon:");

    midaftLabel.setText("Midaft:");

    afternoonLabel.setText("Afternoon:");

    eveningLabel.setText("Evening:");

    bedtimeLabel.setText("Bedtime:");

    midofnightLabel.setText("MidOfNight:");

    alldaysLabel.setText("Alldays:");

    alltimesLabel.setText("Alltimes:");

    asneededLabel.setText("Asneeded:");

    leadtimeLabel.setText("Leadtime:");

    otfLabel.setText("Other Times:");

    org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.uuid}"), uuidField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), uuidField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.type}"), typeField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), typeField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.name}"), nameField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), nameField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.condition}"), conditionField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), conditionField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.dose}"), doseField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), doseField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.measure}"), measureField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), measureField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.reminder}"), reminderField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), reminderField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.monday}"), mondayField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), mondayField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.tuesday}"), tuesdayField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), tuesdayField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.wednesday}"), wednesdayField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), wednesdayField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.thursday}"), thursdayField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), thursdayField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.friday}"), fridayField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), fridayField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.saturday}"), saturdayField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), saturdayField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.sunday}"), sundayField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), sundayField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.am}"), amField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), amField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.midam}"), midamField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), midamField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.noon}"), noonField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), noonField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.midaft}"), midaftField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), midaftField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.afternoon}"), afternoonField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), afternoonField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.evening}"), eveningField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), eveningField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.bedtime}"), bedtimeField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), bedtimeField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.midofnight}"), midofnightField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), midofnightField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.alldays}"), alldaysField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), alldaysField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.alltimes}"), alltimesField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), alltimesField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.asneeded}"), asneededField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), asneededField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.leadtime}"), leadtimeField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), leadtimeField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.otf}"), otfField, org.jdesktop.beansbinding.BeanProperty.create("text"));
    binding.setSourceUnreadableValue("null");
    bindingGroup.addBinding(binding);
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), otfField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    saveButton.setText("Save");
    saveButton.addActionListener(formListener);

    refreshButton.setText("Refresh");
    refreshButton.addActionListener(formListener);

    newButton.setText("New");
    newButton.addActionListener(formListener);

    deleteButton.setText("Delete");

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    deleteButton.addActionListener(formListener);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .add(mondayLabel)
            .add(30, 30, 30)
            .add(mondayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(0, 0, Short.MAX_VALUE))
          .add(masterScrollPane)
          .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(uuidLabel)
              .add(typeLabel)
              .add(nameLabel)
              .add(conditionLabel)
              .add(doseLabel)
              .add(measureLabel)
              .add(reminderLabel)
              .add(tuesdayLabel)
              .add(wednesdayLabel)
              .add(thursdayLabel)
              .add(fridayLabel)
              .add(saturdayLabel)
              .add(sundayLabel))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(layout.createSequentialGroup()
                .add(tuesdayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
              .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                  .add(layout.createSequentialGroup()
                    .add(0, 0, Short.MAX_VALUE)
                    .add(newButton)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(deleteButton)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(refreshButton)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(saveButton))
                  .add(layout.createSequentialGroup()
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                      .add(typeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(nameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(conditionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(doseField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(measureField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(uuidField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(reminderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(wednesdayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(thursdayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(fridayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(saturdayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(sundayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 57, Short.MAX_VALUE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                      .add(afternoonLabel)
                      .add(amLabel)
                      .add(midamLabel)
                      .add(noonLabel)
                      .add(midaftLabel)
                      .add(eveningLabel)
                      .add(bedtimeLabel)
                      .add(midofnightLabel)
                      .add(alldaysLabel)
                      .add(alltimesLabel)
                      .add(asneededLabel)
                      .add(leadtimeLabel)
                      .add(otfLabel))
                    .add(20, 20, 20)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                      .add(otfField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(leadtimeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(asneededField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(alltimesField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(alldaysField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(amField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(midamField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(noonField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(midaftField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(afternoonField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(eveningField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(bedtimeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                      .add(midofnightField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(17, 17, 17)))))
        .addContainerGap())
    );

    layout.linkSize(new java.awt.Component[] {deleteButton, newButton, refreshButton, saveButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(masterScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(uuidLabel)
              .add(uuidField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(typeLabel)
              .add(typeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(nameLabel)
              .add(nameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(conditionLabel)
              .add(conditionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(doseLabel)
              .add(doseField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(measureLabel)
              .add(measureField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(reminderLabel)
              .add(reminderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
          .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(amField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(amLabel))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(midamField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(midamLabel))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(noonField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(noonLabel))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(midaftField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(midaftLabel))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(afternoonField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(afternoonLabel))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(eveningField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(eveningLabel))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(bedtimeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(bedtimeLabel))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(midofnightField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(midofnightLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(mondayLabel)
          .add(mondayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(tuesdayLabel)
          .add(tuesdayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(wednesdayLabel)
          .add(wednesdayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(alldaysLabel)
          .add(alldaysField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(thursdayLabel)
          .add(thursdayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(alltimesLabel)
          .add(alltimesField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(fridayLabel)
          .add(fridayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(asneededLabel)
          .add(asneededField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(saturdayLabel)
          .add(saturdayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(leadtimeLabel)
          .add(leadtimeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(sundayLabel)
          .add(sundayField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(otfLabel)
          .add(otfField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .add(18, 18, 18)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(saveButton)
          .add(refreshButton)
          .add(deleteButton)
          .add(newButton))
        .addContainerGap())
    );

    bindingGroup.bind();
  }

  // Code for dispatching events from components to event handlers.

  private class FormListener implements java.awt.event.ActionListener {
    FormListener() {}
    public void actionPerformed(java.awt.event.ActionEvent evt) {
      if (evt.getSource() == saveButton) {
        MedRightDBaseEditorGUI.this.saveButtonActionPerformed(evt);
      }
      else if (evt.getSource() == refreshButton) {
        MedRightDBaseEditorGUI.this.refreshButtonActionPerformed(evt);
      }
      else if (evt.getSource() == newButton) {
        MedRightDBaseEditorGUI.this.newButtonActionPerformed(evt);
      }
      else if (evt.getSource() == deleteButton) {
        MedRightDBaseEditorGUI.this.deleteButtonActionPerformed(evt);
      }
    }
  }// </editor-fold>//GEN-END:initComponents

  

  @SuppressWarnings ("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
      entityManager.getTransaction ().rollback ();
      entityManager.getTransaction ().begin ();
      java.util.Collection data = query.getResultList ();
      for ( Object entity : data ) {
        entityManager.refresh ( entity );
      }
      list.clear ();
      list.addAll ( data );
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
      int[] selected = masterTable.getSelectedRows ();
      List<org.redbrick.medright.Treatments> toRemove = new ArrayList<org.redbrick.medright.Treatments> ( selected.length );
      for ( int idx = 0; idx < selected.length; idx++ ) {
        org.redbrick.medright.Treatments t = list.get ( masterTable.convertRowIndexToModel ( selected[idx] ) );
        toRemove.add ( t );
        entityManager.remove ( t );
      }
      list.removeAll ( toRemove );
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
      org.redbrick.medright.Treatments t = new org.redbrick.medright.Treatments ();
      entityManager.persist ( t );
      list.add ( t );
      int row = list.size () - 1;
      masterTable.setRowSelectionInterval ( row, row );
      masterTable.scrollRectToVisible ( masterTable.getCellRect ( row, 0, true ) );
    }//GEN-LAST:event_newButtonActionPerformed
  
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
      try {
        entityManager.getTransaction ().commit ();
        entityManager.getTransaction ().begin ();
      } catch ( RollbackException rex ) {
        rex.printStackTrace ();
        entityManager.getTransaction ().begin ();
        List<org.redbrick.medright.Treatments> merged = new ArrayList<org.redbrick.medright.Treatments> ( list.size () );
        for ( org.redbrick.medright.Treatments t : list ) {
          merged.add ( entityManager.merge ( t ) );
        }
        list.clear ();
        list.addAll ( merged );
      }
    }//GEN-LAST:event_saveButtonActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField afternoonField;
  private javax.swing.JLabel afternoonLabel;
  private javax.swing.JTextField alldaysField;
  private javax.swing.JLabel alldaysLabel;
  private javax.swing.JTextField alltimesField;
  private javax.swing.JLabel alltimesLabel;
  private javax.swing.JTextField amField;
  private javax.swing.JLabel amLabel;
  private javax.swing.JTextField asneededField;
  private javax.swing.JLabel asneededLabel;
  private javax.swing.JTextField bedtimeField;
  private javax.swing.JLabel bedtimeLabel;
  private javax.swing.JTextField conditionField;
  private javax.swing.JLabel conditionLabel;
  private javax.swing.JButton deleteButton;
  private javax.swing.JTextField doseField;
  private javax.swing.JLabel doseLabel;
  private javax.persistence.EntityManager entityManager;
  private javax.swing.JTextField eveningField;
  private javax.swing.JLabel eveningLabel;
  private javax.swing.JTextField fridayField;
  private javax.swing.JLabel fridayLabel;
  private javax.swing.JTextField leadtimeField;
  private javax.swing.JLabel leadtimeLabel;
  private java.util.List<org.redbrick.medright.Treatments> list;
  private javax.swing.JScrollPane masterScrollPane;
  private javax.swing.JTable masterTable;
  private javax.swing.JTextField measureField;
  private javax.swing.JLabel measureLabel;
  private javax.swing.JTextField midaftField;
  private javax.swing.JLabel midaftLabel;
  private javax.swing.JTextField midamField;
  private javax.swing.JLabel midamLabel;
  private javax.swing.JTextField midofnightField;
  private javax.swing.JLabel midofnightLabel;
  private javax.swing.JTextField mondayField;
  private javax.swing.JLabel mondayLabel;
  private javax.swing.JTextField nameField;
  private javax.swing.JLabel nameLabel;
  private javax.swing.JButton newButton;
  private javax.swing.JTextField noonField;
  private javax.swing.JLabel noonLabel;
  private javax.swing.JTextField otfField;
  private javax.swing.JLabel otfLabel;
  private javax.persistence.Query query;
  private javax.swing.JButton refreshButton;
  private javax.swing.JTextField reminderField;
  private javax.swing.JLabel reminderLabel;
  private javax.swing.JTextField saturdayField;
  private javax.swing.JLabel saturdayLabel;
  private javax.swing.JButton saveButton;
  private javax.swing.JTextField sundayField;
  private javax.swing.JLabel sundayLabel;
  private javax.swing.JTextField thursdayField;
  private javax.swing.JLabel thursdayLabel;
  private javax.swing.JTextField tuesdayField;
  private javax.swing.JLabel tuesdayLabel;
  private javax.swing.JTextField typeField;
  private javax.swing.JLabel typeLabel;
  private javax.swing.JTextField uuidField;
  private javax.swing.JLabel uuidLabel;
  private javax.swing.JTextField wednesdayField;
  private javax.swing.JLabel wednesdayLabel;
  private org.jdesktop.beansbinding.BindingGroup bindingGroup;
  // End of variables declaration//GEN-END:variables
  public static void main (String[] args) {
    /*
     * Set the Nimbus look and feel
     */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
     * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
      for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels () ) {
        if ( "Metal".equals ( info.getName () ) ) {
          javax.swing.UIManager.setLookAndFeel ( info.getClassName () );
          break;
        }
      }
    } catch ( ClassNotFoundException ex ) {
      java.util.logging.Logger.getLogger ( MedRightDBaseEditorGUI.class.getName () ).log ( java.util.logging.Level.SEVERE, null, ex );
    } catch ( InstantiationException ex ) {
      java.util.logging.Logger.getLogger ( MedRightDBaseEditorGUI.class.getName () ).log ( java.util.logging.Level.SEVERE, null, ex );
    } catch ( IllegalAccessException ex ) {
      java.util.logging.Logger.getLogger ( MedRightDBaseEditorGUI.class.getName () ).log ( java.util.logging.Level.SEVERE, null, ex );
    } catch ( javax.swing.UnsupportedLookAndFeelException ex ) {
      java.util.logging.Logger.getLogger ( MedRightDBaseEditorGUI.class.getName () ).log ( java.util.logging.Level.SEVERE, null, ex );
    }
        //</editor-fold>

    /*
     * Create and display the form
     */
    EventQueue.invokeLater ( new Runnable () {
      @Override
      public void run () {
        JFrame frame = new JFrame ();
        frame.setContentPane ( new MedRightDBaseEditorGUI () );
        frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE );
        frame.pack ();
        frame.setVisible ( true );
      }
    } );
  }
  
}
